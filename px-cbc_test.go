package aespxcbc

import (
	"bytes"
	"crypto/aes"
	"testing"
)

// Common values for tests.

var commonInput = []byte{
	0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
}

var commonKey128 = []byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}

var commonKey192 = []byte{
	0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
	0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
}

var commonKey256 = []byte{
	0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
	0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4,
}

var commonIV = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}

// Test vectors from NIST(https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/aes/AESAVS.pdf).
// Out is the result of encrypting commonInput with the corresponding key and IV. The out it didn't come from the NIST, it was generated by the code.

var pxcbcAESTests = []struct {
	name string
	key  []byte
	iv   []byte
	in   []byte
	out  []byte
}{
	{
		"PXCBC-AES128",
		commonKey128,
		commonIV,
		commonInput,
		// 7649abac8119b246cee98e9b12e9197d05495a294cb949fd4d238533c6ea49fd8f84d54d827a5e27f39f8f0be0c9798b405c15b2c7e94128ac84095182ee1293
		[]byte{
			0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
			0x05, 0x49, 0x5a, 0x29, 0x4c, 0xb9, 0x49, 0xfd, 0x4d, 0x23, 0x85, 0x33, 0xc6, 0xea, 0x49, 0xfd,
			0x8f, 0x84, 0xd5, 0x4d, 0x82, 0x7a, 0x5e, 0x27, 0xf3, 0x9f, 0x8f, 0x0b, 0xe0, 0xc9, 0x79, 0x8b,
			0x40, 0x5c, 0x15, 0xb2, 0xc7, 0xe9, 0x41, 0x28, 0xac, 0x84, 0x09, 0x51, 0x82, 0xee, 0x12, 0x93,
		},
	},
	{
		"PXCBC-AES192",
		commonKey192,
		commonIV,
		commonInput,
		// 7da57acccde3208cf22f4ece8a21c7290fc750c78f5f2663beac51d18b2ce400063de22e1effbc48b0d603abfd4f1d0792e4ee805dbe6cf257e3a22b69c1ac6f
		[]byte{
			0x7d, 0xa5, 0x7a, 0xcc, 0xcd, 0xe3, 0x20, 0x8c, 0xf2, 0x2f, 0x4e, 0xce, 0x8a, 0x21, 0xc7, 0x29,
			0x0f, 0xc7, 0x50, 0xc7, 0x8f, 0x5f, 0x26, 0x63, 0xbe, 0xac, 0x51, 0xd1, 0x8b, 0x2c, 0xe4, 0x00,
			0x06, 0x3d, 0xe2, 0x2e, 0x1e, 0xff, 0xbc, 0x48, 0xb0, 0xd6, 0x03, 0xab, 0xfd, 0x4f, 0x1d, 0x07,
			0x92, 0xe4, 0xee, 0x80, 0x5d, 0xbe, 0x6c, 0xf2, 0x57, 0xe3, 0xa2, 0x2b, 0x69, 0xc1, 0xac, 0x6f,
		},
	},
	{
		"PXCBC-AES256",
		commonKey256,
		commonIV,
		commonInput,
		// c58fe060548c4c7525059b084267b03bbc4e807d9a7757f0ca073cfd41461dfd557c8f62c47309e89f978e12074aab8638060a448a9632c175f4092550b86351
		[]byte{
			0xc5, 0x8f, 0xe0, 0x60, 0x54, 0x8c, 0x4c, 0x75, 0x25, 0x05, 0x9b, 0x08, 0x42, 0x67, 0xb0, 0x3b,
			0xbc, 0x4e, 0x80, 0x7d, 0x9a, 0x77, 0x57, 0xf0, 0xca, 0x07, 0x3c, 0xfd, 0x41, 0x46, 0x1d, 0xfd,
			0x55, 0x7c, 0x8f, 0x62, 0xc4, 0x73, 0x09, 0xe8, 0x9f, 0x97, 0x8e, 0x12, 0x07, 0x4a, 0xab, 0x86,
			0x38, 0x06, 0x0a, 0x44, 0x8a, 0x96, 0x32, 0xc1, 0x75, 0xf4, 0x09, 0x25, 0x50, 0xb8, 0x63, 0x51,
		},
	},
}

func TestPXCBCEncrypterAES(t *testing.T) {
	for _, test := range pxcbcAESTests {
		c, err := aes.NewCipher(test.key)
		if err != nil {
			t.Errorf("%s: NewCipher(%d bytes) = %s", test.name, len(test.key), err)
			continue
		}

		encrypter := NewPXCBCEncrypter(c, test.iv)

		data := make([]byte, len(test.in))
		copy(data, test.in)

		encrypter.CryptBlocks(data, data)
		if !bytes.Equal(test.out, data) {
			t.Errorf("%s: PXCBCEncrypter\nhave %x\nwant %x", test.name, data, test.out)
		}
	}
}

func TestPXCBCDecrypterAES(t *testing.T) {
	for _, test := range pxcbcAESTests {
		c, err := aes.NewCipher(test.key)
		if err != nil {
			t.Errorf("%s: NewCipher(%d bytes) = %s", test.name, len(test.key), err)
			continue
		}

		decrypter := NewPXCBCDecrypter(c, test.iv)

		data := make([]byte, len(test.out))
		copy(data, test.out)

		decrypter.CryptBlocks(data, data)
		if !bytes.Equal(test.in, data) {
			t.Errorf("%s: PXCBCDecrypter\nhave %x\nwant %x", test.name, data, test.in)
		}
	}
}
